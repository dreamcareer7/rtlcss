/*

Preserves orignal formatting

 */

/* comment before rule */
body/* comment after rule name */{
    /* comment before decl */
    padding /*  comment after prop */ : /*  comment before val */ 0 /*  comment after val */ 3px /* another comment */ 2px /* one more */ 1px /* last one*/;
    /* comment after decl */

    margin:
        0 /*top*/
        3px /*right
        multi-line
        comment
        */
        2px /*bottom*/
        1px /*left*/;

    border-right/*  comment after prop */: none;
}

/* empty options forces defaults */
/* should not process urls - default */
@import url("rtl-right-east.css");
div:before { content: "ABC";} div:after { content: "A";}

.demo-next, .demo-Next, .demo-NEXT { content: 'p'; }
.demo-prev, .demo-Prev, .demo-PREV { content: 'n'; }


div {
  text-align: left;
  padding: 10px;
}
.sample {
    text-align: left;
}
.right { display:inline;}
/*rtl:begin:options:{"autoRename":true, "greedy": true}*/
.bleft { display:inline;}
/*rtl:end:options*/
.brighter { display:inline;}

/* auto rename only if a pair exists */

/* The following should not be renamed */
.ltr{ display: inline-flex;}

/* But these should */
.left{ display: inline-flex;}
.right { display: block;}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlucHV0LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHOztBQUVILHlCQUF5QjtBQUN6QjtJQUNJLHlCQUF5QjtJQUN6Qix3SkFBd0o7SUFDeEosd0JBQXdCOztJQUV4Qjs7Ozs7OztxQkFPaUI7O0lBRWpCLDRDQUEyQztDQUM5Qzs7QUFFRCxtQ0FBbUM7QUFFbkMsdUNBQXVDO0FBQ3ZDLGtDQUFrQztBQXdDbEMsYUFBYSxlQUFhLENBQUMsQ0FBQyxZQUFZLGFBQWUsQ0FBQzs7QUFFeEQscUNBQXFDLGFBQWEsRUFBRTtBQUNwRCxxQ0FBcUMsYUFBYSxFQUFFOzs7QUFZcEQ7RUFHRSxpQkFBa0I7RUFDbEIsY0FBYztDQUNmO0FBR0Q7SUFDSSxpQkFBaUI7Q0FDcEI7QUFLRCxTQUFTLGVBQWUsQ0FBQztBQUN6Qix5REFBeUQ7QUFDekQsU0FBVSxlQUFlLENBQUM7QUFDMUIsbUJBQW1CO0FBQ25CLFlBQVksZUFBZSxDQUFDOztBQUc1Qix1Q0FBdUM7O0FBSXZDLHlDQUF5QztBQUN6QyxNQUFNLHFCQUFxQixDQUFDOztBQUU1QixzQkFBc0I7QUFDdEIsT0FBUSxxQkFBcUIsQ0FBQztBQUM5QixTQUFRLGVBQWUsQ0FBQyIsImZpbGUiOiJpbnB1dC5ydGwuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHJcblByZXNlcnZlcyBvcmlnbmFsIGZvcm1hdHRpbmdcclxuXHJcbiAqL1xyXG5cclxuLyogY29tbWVudCBiZWZvcmUgcnVsZSAqL1xyXG5ib2R5LyogY29tbWVudCBhZnRlciBydWxlIG5hbWUgKi97XHJcbiAgICAvKiBjb21tZW50IGJlZm9yZSBkZWNsICovXHJcbiAgICBwYWRkaW5nIC8qICBjb21tZW50IGFmdGVyIHByb3AgKi8gOiAvKiAgY29tbWVudCBiZWZvcmUgdmFsICovIDAgLyogIGNvbW1lbnQgYWZ0ZXIgdmFsICovIDFweCAvKiBhbm90aGVyIGNvbW1lbnQgKi8gMnB4IC8qIG9uZSBtb3JlICovIDNweCAvKiBsYXN0IG9uZSovO1xyXG4gICAgLyogY29tbWVudCBhZnRlciBkZWNsICovXHJcblxyXG4gICAgbWFyZ2luOlxyXG4gICAgICAgIDAgLyp0b3AqL1xyXG4gICAgICAgIDFweCAvKnJpZ2h0XHJcbiAgICAgICAgbXVsdGktbGluZVxyXG4gICAgICAgIGNvbW1lbnRcclxuICAgICAgICAqL1xyXG4gICAgICAgIDJweCAvKmJvdHRvbSovXHJcbiAgICAgICAgM3B4IC8qbGVmdCovO1xyXG5cclxuICAgIGJvcmRlci1sZWZ0LyogIGNvbW1lbnQgYWZ0ZXIgcHJvcCAqLzogbm9uZTtcclxufVxyXG5cclxuLyogZW1wdHkgb3B0aW9ucyBmb3JjZXMgZGVmYXVsdHMgKi9cclxuLypydGw6YmVnaW46b3B0aW9uczoge30qL1xyXG4vKiBzaG91bGQgbm90IHByb2Nlc3MgdXJscyAtIGRlZmF1bHQgKi9cclxuQGltcG9ydCB1cmwoXCJydGwtcmlnaHQtZWFzdC5jc3NcIik7XHJcbi8qcnRsOmVuZDpvcHRpb25zKi9cclxuXHJcbi8qcnRsOmJlZ2luOmNvbmZpZzpcclxue1xyXG4gICAgXCJvcHRpb25zXCI6e1xyXG4gICAgICAgIFwiYXV0b1JlbmFtZVwiOiB0cnVlLFxyXG4gICAgICAgIFwic3RyaW5nTWFwXCI6W1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgIFwibmFtZVwiICAgIDogXCJwcmV2LW5leHRcIixcclxuICAgICAgICAgICAgXCJzZWFyY2hcIiAgOiBbXCJwcmV2XCIsIFwiUHJldlwiLCBcIlBSRVZcIl0sXHJcbiAgICAgICAgICAgIFwicmVwbGFjZVwiIDogW1wibmV4dFwiLCBcIk5leHRcIiwgXCJORVhUXCJdLFxyXG4gICAgICAgICAgICBcIm9wdGlvbnNcIiA6IHtcImlnbm9yZUNhc2VcIjpmYWxzZX1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgIH0sXHJcbiAgICBcInBsdWdpbnNcIjpbXHJcbiAgICAgIHtcclxuICAgICAgICBcIm5hbWVcIjogXCJ0ZXN0XCIsXHJcbiAgICAgICAgXCJkaXJlY3RpdmVzXCI6e1xyXG4gICAgICAgICAgXCJjb250cm9sXCI6IHt9LFxyXG4gICAgICAgICAgXCJ2YWx1ZVwiOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJwcm9jZXNzb3JzXCI6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29udGVudFwiLFxyXG4gICAgICAgICAgICBcImV4cHJcIjogL2NvbnRlbnQvaW0sXHJcbiAgICAgICAgICAgIFwiYWN0aW9uXCI6IGZ1bmN0aW9uIChwcm9wLCB2YWx1ZSwgY3h0KSB7XHJcbiAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnXCJBXCInKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAncHJvcCc6IHByb3AsICd2YWx1ZSc6ICdcIkFCQ1wiJyB9XHJcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ1wiQUJDXCInKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAncHJvcCc6IHByb3AsICd2YWx1ZSc6ICdcIkFcIicgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICByZXR1cm4geyAncHJvcCc6IHByb3AsICd2YWx1ZSc6IHZhbHVlIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIF1cclxuICAgICAgfVxyXG4gICAgXVxyXG59Ki9cclxuZGl2OmJlZm9yZSB7IGNvbnRlbnQ6IFwiQVwiO30gZGl2OmFmdGVyIHsgY29udGVudDogXCJBQkNcIjt9XHJcblxyXG4uZGVtby1wcmV2LCAuZGVtby1QcmV2LCAuZGVtby1QUkVWIHsgY29udGVudDogJ3AnOyB9XHJcbi5kZW1vLW5leHQsIC5kZW1vLU5leHQsIC5kZW1vLU5FWFQgeyBjb250ZW50OiAnbic7IH1cclxuXHJcbi8qcnRsOmVuZDpjb25maWcqL1xyXG5cclxuLyohcnRsOmJlZ2luOnJlbW92ZSovXHJcbkBpbXBvcnQgdXJsKC90ZXN0LmNzcyk7XHJcbmkge1xyXG4gIGNvbG9yOiBibHVlOyAgXHJcbn1cclxuLypydGw6ZW5kOnJlbW92ZSovXHJcblxyXG5cclxuZGl2IHtcclxuICAvKnJ0bDpyZW1vdmUqL1xyXG4gIGRpcmVjdGlvbjogcnRsO1xyXG4gIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbn1cclxuXHJcbi8qcnRsOmJlZ2luOmlnbm9yZSovXHJcbi5zYW1wbGUge1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxufVxyXG4vKnJ0bDplbmQ6aWdub3JlKi9cclxuXHJcblxyXG4vKnJ0bDpiZWdpbjpvcHRpb25zOntcImF1dG9SZW5hbWVcIjpmYWxzZSwgXCJjbGVhblwiOiBmYWxzZX0qL1xyXG4ucmlnaHQgeyBkaXNwbGF5OmlubGluZTt9XHJcbi8qcnRsOmJlZ2luOm9wdGlvbnM6e1wiYXV0b1JlbmFtZVwiOnRydWUsIFwiZ3JlZWR5XCI6IHRydWV9Ki9cclxuLmJyaWdodCB7IGRpc3BsYXk6aW5saW5lO31cclxuLypydGw6ZW5kOm9wdGlvbnMqL1xyXG4uYnJpZ2h0ZXIgeyBkaXNwbGF5OmlubGluZTt9XHJcbi8qcnRsOmVuZDpvcHRpb25zKi9cclxuXHJcbi8qIGF1dG8gcmVuYW1lIG9ubHkgaWYgYSBwYWlyIGV4aXN0cyAqL1xyXG5cclxuLypydGw6YmVnaW46b3B0aW9uczp7XCJhdXRvUmVuYW1lXCI6dHJ1ZSwgXCJhdXRvUmVuYW1lU3RyaWN0XCI6IHRydWV9Ki9cclxuXHJcbi8qIFRoZSBmb2xsb3dpbmcgc2hvdWxkIG5vdCBiZSByZW5hbWVkICovXHJcbi5sdHJ7IGRpc3BsYXk6IGlubGluZS1mbGV4O31cclxuXHJcbi8qIEJ1dCB0aGVzZSBzaG91bGQgKi9cclxuLnJpZ2h0eyBkaXNwbGF5OiBpbmxpbmUtZmxleDt9XHJcbi5sZWZ0IHsgZGlzcGxheTogYmxvY2s7fVxyXG5cclxuLypydGw6ZW5kOm9wdGlvbnMqLyJdfQ== */